{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","object","props","action","Proxy","get","target","prop","receiver","includes","_isFunction","console","log","result","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CAaKC,M,EAAQC,K,EAAOC,M,EAAQ;AACjC,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AACrBI,+BADqB,eACjBC,MADiB,EACTC,IADS,EACHC,QADG,EACO;AACxB,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,WAAb,CAAyBJ,OAAOC,IAAP,CAAzB,CAA5B,EAAoE;AAChE,2CAAO,YAAY;AACfI,gDAAQC,GAAR,qBAA8BL,IAA9B;AACA,4CAAIM,SAASC,QAAQC,KAAR,CAAcT,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCU,SAApC,CAAb;AACAb,+CAAOG,MAAP;AACA,+CAAOO,MAAP;AACH,qCALD;AAMH;AACD,uCAAOC,QAAQT,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACH,6BAXoB;AAoBrBS,+BApBqB,eAoBjBX,MApBiB,EAoBTC,IApBS,EAoBHW,KApBG,EAoBIV,QApBJ,EAoBc;;AAE/B,oCAAIK,SAASC,QAAQG,GAAR,CAAYX,MAAZ,EAAoBC,IAApB,EAA0BW,KAA1B,EAAiCV,QAAjC,CAAb;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,CAAH,EAAyBJ,OAAOG,MAAP;AACzB,uCAAOO,MAAP;AACH;AAzBoB,yBAAlB,CAAP;AA2BH;;;gDAEkBM,I,EAAM;AAAE,+BAAO,QAAOA,IAAP,yCAAOA,IAAP,cAAuBC,QAAvB,yCAAuBA,QAAvB,EAAP;AAAyC","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\r\n\r\n    /**\r\n     * object -> Object Model\r\n     * props -> Array\r\n     * action -> Callback\r\n     * \r\n     * return {\r\n     *      Callback value\r\n     * }\r\n     * \r\n     * Por último temos o REST OPERATOR\r\n     */\r\n    static create(object, props, action) {\r\n        return new Proxy(object, {\r\n            get(target, prop, receiver) {\r\n                if (props.includes(prop) && ProxyFactory._isFunction(target[prop])) {\r\n                    return function () {\r\n                        console.log(`a propriedade '${prop}' foi interceptado`);\r\n                        let result = Reflect.apply(target[prop], target, arguments); \r\n                        action(target)\r\n                        return result;\r\n                    }\r\n                }\r\n                return Reflect.get(target, prop, receiver);\r\n            },\r\n\r\n            /**\r\n             *  Retorna a propriedade que sofreu alterações\r\n             * @param {*} target \r\n             * @param {*} prop \r\n             * @param {*} value \r\n             * @param {*} receiver \r\n             */\r\n            set(target, prop, value, receiver) {\r\n                    \r\n                let result = Reflect.set(target, prop, value, receiver);\r\n                if(props.includes(prop)) action(target);\r\n                return result;\r\n            }\r\n        });\r\n    }\r\n\r\n    static _isFunction(func) { return typeof(func) == typeof(Function) }\r\n}"]}